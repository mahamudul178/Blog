

name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest pytest-django
    
    - name: Run migrations
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: True
      run: |
        cd backend
        python manage.py migrate --noinput
    
    - name: Run tests
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: True
      run: |
        cd backend
        python manage.py test --verbosity=2
    
    - name: Run coverage
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: True
      run: |
        cd backend
        coverage run --source='api' manage.py test
        coverage report
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Check code quality
      run: |
        cd backend
        pip install flake8
        flake8 api --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 api --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  
  lint:
    name: Lint Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run flake8
      run: |
        cd backend
        flake8 api --count --show-source --statistics
    
    - name: Check formatting with black
      run: |
        cd backend
        black --check api
    
    - name: Check imports with isort
      run: |
        cd backend
        isort --check-only api
  
  security:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run Bandit security check
      run: |
        cd backend
        bandit -r api -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        cd backend
        safety check --json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
  
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/myapp-backend:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/myapp-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/myapp-backend:buildcache,mode=max
  
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Railway/Render
      run: |
        echo "Deployment step"
        # Add your deployment commands here
        # Example: railway deploy or render deploy
    
    - name: Send notification
      if: always()
      run: |
        echo "Send deployment notification to Slack/Discord"
        # Add notification logic